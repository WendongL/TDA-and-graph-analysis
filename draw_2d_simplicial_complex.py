# -*- coding: utf-8 -*-
"""Draw 2d simplicial complex.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CGAxEDtQrk6mycp8IExsPAKTuqWH1rQS
"""

# Commented out IPython magic to ensure Python compatibility.
import networkx as nx
import itertools
import gudhi

import matplotlib.pyplot as plt
# %matplotlib inline 

plt.ion()
plt.show()



def draw_2d_simplicial_complex(simplices, pos=None, return_pos=False, ax = None):
    """
    Draw a simplicial complex up to dimension 2 from a list of simplices, as in [1].
        
        Args
        ----
        simplices: list of lists of integers
            List of simplices to draw. Sub-simplices are not needed (only maximal).
            For example, the 2-simplex [1,2,3] will automatically generate the three
            1-simplices [1,2],[2,3],[1,3] and the three 0-simplices [1],[2],[3].
            When a higher order simplex is entered only its sub-simplices
            up to D=2 will be drawn.
        
        pos: dict (default=None)
            If passed, this dictionary of positions d:(x,y) is used for placing the 0-simplices.
            The standard nx spring layour is used otherwise.
           
        ax: matplotlib.pyplot.axes (default=None)
        
        return_pos: dict (default=False)
            If True returns the dictionary of positions for the 0-simplices.
            
        References
        ----------    
        .. [1] I. Iacopini, G. Petri, A. Barrat & V. Latora (2019)
               "Simplicial Models of Social Contagion".
               Nature communications, 10(1), 2485.
    """

    
    #List of 0-simplices
    nodes =list(set(itertools.chain(*simplices)))
    
    #List of 1-simplices
    edges = list(set(itertools.chain(*[[tuple(sorted((i, j))) for i, j in itertools.combinations(simplex, 2)] for simplex in simplices])))

    #List of 2-simplices
    triangles = list(set(itertools.chain(*[[tuple(sorted((i, j, k))) for i, j, k in itertools.combinations(simplex, 3)] for simplex in simplices])))
    

    
    #List of 3-simplices
    tetras = list(set(itertools.chain(*[[tuple(sorted((i, j, k, l))) for i, j, k, l in itertools.combinations(simplex, 4)] for simplex in simplices])))

    
    if ax is None: ax = plt.gca()
    ax.set_xlim([-1.1, 1.1])      
    ax.set_ylim([-1.1, 1.1])
    ax.get_xaxis().set_ticks([])  
    ax.get_yaxis().set_ticks([])
    ax.axis('off')
       
    if pos is None:
        # Creating a networkx Graph from the edgelist
        G = nx.Graph()
        G.add_edges_from(edges)
        # Creating a dictionary for the position of the nodes
        pos = nx.spring_layout(G)
        
    # Drawing the edges
    for i, j in edges:
        (x0, y0) = pos[i]
        (x1, y1) = pos[j]
        line = plt.Line2D([ x0, x1 ], [y0, y1 ],color = 'black', zorder = 1, lw=0.7)
        ax.add_line(line);
    
    # Filling in the triangles
    for i, j, k in triangles:
        (x0, y0) = pos[i]
        (x1, y1) = pos[j]
        (x2, y2) = pos[k]
        tri = plt.Polygon([ [ x0, y0 ], [ x1, y1 ], [ x2, y2 ] ],
                          edgecolor = 'black', facecolor = plt.cm.Blues(0.4),
                          zorder = 2, alpha=0.4, lw=0.5)
        ax.add_patch(tri);

    # Filling in the tetrahedrons
    for i, j, k, l in tetras:
        (x0, y0) = pos[i]
        (x1, y1) = pos[j]
        (x2, y2) = pos[k]
        (x3, y3) = pos[l]
        tri = plt.Polygon([ [ x0, y0 ], [ x1, y1 ], [ x2, y2 ]],
                          edgecolor = 'black', facecolor = plt.cm.Reds(0.4),
                          zorder = 2, alpha=0.4, lw=0.5)
        tri2 = plt.Polygon([ [ x0, y0 ], [ x1, y1 ], [ x3, y3 ]],
                          edgecolor = 'black', facecolor = plt.cm.Reds(0.4),
                          zorder = 2, alpha=0.4, lw=0.5)
        tri3 = plt.Polygon([ [ x0, y0 ], [ x2, y2 ], [ x3, y3 ]],
                          edgecolor = 'black', facecolor = plt.cm.Reds(0.4),
                          zorder = 2, alpha=0.4, lw=0.5)
        tri4 = plt.Polygon([ [ x1, y1 ], [ x2, y2 ], [ x3, y3 ]],
                          edgecolor = 'black', facecolor = plt.cm.Reds(0.4),
                          zorder = 2, alpha=0.4, lw=0.5)
        ax.add_patch(tri);
        ax.add_patch(tri2);
        ax.add_patch(tri3);
        ax.add_patch(tri4);
    # Drawing the nodes 
    for i in nodes:
        (x, y) = pos[i]
        circ = plt.Circle([ x, y ], radius = 0.02, zorder = 3, lw=0.5,
                          edgecolor = 'Black', facecolor = u'#ff7f0e')
        ax.add_patch(circ);
        plt.text(x+0.06, y-0.01, str(i), fontsize=10)
    if return_pos: return pos

# simplices = [[0,1],[1,2,3],[2,4],[4,5,6,7],[4,0],[0,2],[0,9,10],[9,10,11,12],[10,11,12,13]]

G = nx.Graph()
G.add_edge(1, 2)
G.add_edge(1, 3)
G.add_edge(1, 4)
G.add_edge(2, 3)
G.add_edge(2, 4)
G.add_edge(4, 3)
G.add_edge(4, 5)
G.add_edge(3, 5)
G.add_edge(5, 6)
st=gudhi.SimplexTree()
for edge in list(G.edges):
    st.insert(list(edge),filtration=0)
st.expansion(3)
fil=st.get_filtration()
simplices=[]
for x in fil:
    simplices.append(x[0])



f = plt.figure(figsize=(10,10))
ax2 = f.add_subplot(121)
nx.draw(G,ax=ax2, with_labels=True, font_weight='bold')

ax = f.add_subplot(122)

draw_2d_simplicial_complex(simplices, ax=ax)
plt.savefig('complexe_clique.pgf')